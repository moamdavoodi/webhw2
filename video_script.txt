سلام به همه!
می‌خوام یه توضیح کوتاه بدم درباره برنامه نقاشی که با React و TypeScript نوشتم.
اینترنت افتضاحه و مجبورم بنویسم.


=== راه‌اندازی برنامه ===
1. اول WSL رو باز می‌کنم
2. میرم تو پوشه پروژه و `npm install` می‌زنم که پکیج‌ها نصب بشن
3. با `npm start` برنامه رو اجرا می‌کنم
4. توی localhost:3000 برنامه باز میشه

=== ساختار فایل‌ها ===
- توی پوشه `src` همه کدهامون هست
- فایل اصلی `App.tsx` هست که همه چیز رو مدیریت می‌کنه (598 خط کد)
- از styled-components استفاده کردیم که استایل‌ها تمیز و مرتب باشن

=== بخش‌های مهم کد ===

1. تعریف شکل‌ها (خط 4-9 در App.tsx):
```typescript
interface Shape {
  id: string;
  type: 'circle' | 'square' | 'triangle';
  x: number;
  y: number;
}
```
این تیکه مشخص می‌کنه هر شکل چه مشخصاتی داره

2. کامپوننت‌های استایل شده (خط 11-60):
- تعریف استایل همه بخش‌ها مثل Canvas و Toolbar
- مثلث توخالی رو با CSS درست کردیم که خیلی باحال شده!
- اسکرول‌بار رو کاستوم کردیم که قشنگ‌تر باشه

3. مدیریت state (خط 90-100):
```typescript
const [shapes, setShapes] = useState<Shape[]>([]);
const [selectedTool, setSelectedTool] = useState<Shape['type'] | null>(null);
```
اینجا شکل‌ها و ابزار انتخاب شده رو نگه می‌داریم

4. درگ و دراپ (خط 120-150):
- با HTML5 Drag & Drop API پیاده‌سازی شده
- می‌تونید شکل‌ها رو از toolbar بکشید روی canvas
- موقعیت موس رو می‌گیره و شکل رو همونجا می‌ذاره

5. ذخیره و بازیابی (خط 160-200):
- نقاشی رو به JSON تبدیل می‌کنه
- موقع import چک می‌کنه فایل درست باشه
- همه چیز رو با همون موقعیت‌ها برمی‌گردونه

=== ویژگی‌های خفن برنامه ===
1. اسکرول کردن (خط 40-70 در App.tsx):
   - کنواس خیلی بزرگه و می‌تونید اسکرول کنید
   ```typescript
   const CanvasContainer = styled.div`
     flex: 1;
     border: 1px solid #ccc;
     overflow: auto;
     position: relative;
   `;
   ```
   - یه گرید خوشگل پشتش هست (خط 71-85):
   ```typescript
   const Canvas = styled.div`
     background-image: 
       linear-gradient(to right, #f0f0f0 1px, transparent 1px),
       linear-gradient(to bottom, #f0f0f0 1px, transparent 1px);
     background-size: 20px 20px;
   `;
   ```
   - اسکرول‌بار سفارشی داره که با تم برنامه ست شده

2. شمارش تعداد اشکال (خط 380-390):
   ```typescript
   const shapeCounts = shapes.reduce(
     (acc, shape) => {
       acc[shape.type]++;
       return acc;
     },
     { circle: 0, square: 0, triangle: 0 }
   );
   ```
   - پایین صفحه تعداد هر شکل رو می‌بینید
   - با reduce حساب میشه
   - هر وقت شکل اضافه یا کم بشه آپدیت میشه

3. ایمپورت و اکسپورت (خط 250-320):
   ```typescript
   const handleExport = () => {
     const data = {
       title,
       shapes,
     };
     const blob = new Blob([JSON.stringify(data)]);
     // ... save logic
   };
   ```
   - دکمه Export نقاشی رو به JSON ذخیره می‌کنه
   - می‌تونید فایل رو هر جا ذخیره کنید
   - با Import دوباره می‌تونید بازش کنید
   - اگه فایل مشکل داشته باشه پیغام خطا میده

4. پاک کردن شکل‌ها (خط 200-220):
   ```typescript
   const handleShapeDoubleClick = (e: React.MouseEvent, id: string) => {
     e.stopPropagation();
     setShapes(shapes.filter(shape => shape.id !== id));
   };
   ```
   - دوبار کلیک روی هر شکل اونو پاک می‌کنه
   - یه انیمیشن محو شدن داره که قشنگ میره
   - اگه اشتباهی پاک کردید می‌تونید undo کنید

=== نمایش عملی ===
1. اول نشون میدم چجوری برنامه رو اجرا می‌کنم
2. بعد چندتا شکل می‌کشم و می‌ندازم روی صفحه
3. نشون میدم چجوری میشه:
   - صفحه رو اسکرول کرد
   - شکل‌ها رو دوبار کلیک کرد و پاک کرد
   - تعداد شکل‌ها رو دید
4. یه نقاشی باحال می‌کشم و:
   - اول export می‌کنم
   - بعد همه رو پاک می‌کنم
   - دوباره import می‌کنم که ببینید همه چی سرجاشه

امیدوارم از این برنامه خوشتون بیاد! 😊 